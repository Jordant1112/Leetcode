## 36 Valid Sudoku
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

class Solution:
  def isValidSudoku(self, board: List[List[str]]) -> bool:
    N = len(board)
    row = [set() for x in range(N)]
    col = [set() for x in range(N)]
    boxes = [set() for x in range(N)]
    
    for r in range(N):
      for c in range(N):
        val = board[r][c]
        if val == '.':
          continue
        
        if val in row[r]:
          return False
        row[r].add(val)
        
        if val in col[r]:
          return False
        col[r].add(val)
        
        index = (c//3) + (r//3)*3
        if val in boxes[index]:
          return False
        boxes[index].add(val)
    return True


## 74 Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

class Solution:
  def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
    n = len(matrix)
    m = len(matrix[0])
    if n == 0:
      return False
      
    l = 0
    r = m*n -1
    while l <= r:
      mid = l + (r-l)//2
      if target == matrix[mid//m][mid % m]:
        return True
      else:
        if target < matrix[mid//m][mid % m]:
          r = mid - 1
        else:
          r = mid -1
    return False


## 15 3 Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Input: nums = []
Output: []

class Solution:
  def threeSum(self, nums: List[int]) -> List[List[int]]:
    res = []
    nums.sort()
    for i in range(len(nums)):
      if nums[i] > 0:
        break
      if i == 0 or nums[i-1] != nums[i]:
        self.twoSum(nums, i, res)
    return res
  
  
  def twoSum(self, nums, i , res):
    lo = i+1
    hi = len(nums) -1
    while lo < hi:
      s = nums[i] + nums[lo] + nums[hi]
      if s < 0:
        lo += 1
      elif s < 0:
        hi -= 1
      else:
        res.append([nums[i], nums[lo], nums[hi]])
        lo += 1
        hi -= 1
        while lo < hi and nums[lo] == nums[lo -1]:
          lo += 1


## 346 Moving Average From Data Stream
Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the MovingAverage class:

MovingAverage(int size) Initializes the object with the size of the window size.
double next(int val) Returns the moving average of the last size values of the stream.
 
Input
["MovingAverage", "next", "next", "next", "next"]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]

Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

class MovingAverage:

    def __init__(self, size: int):
        """
        Initialize your data structure here.
        """
        self.size = size
        self.res = []

    def next(self, val: int) -> float:
        size, res = self.size, self.res
        res.append(val)
        # calculate the sum of the moving window
        window_sum = sum(res[-size:])
        return window_sum / min(len(res), size)
    

 ## 1086 High Five
 
Given a list of the scores of different students, items, where items[i] = [IDi, scorei] represents one score from a student with IDi, 
calculate each student's top five average.
Return the answer as an array of pairs result, where result[j] = [IDj, topFiveAveragej] represents the student with IDj and their top five average. 
Sort result by IDj in increasing order.
A student's top five average is calculated by taking the sum of their top five scores and dividing it by 5 using integer division.

Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.
The student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, 
but with integer division their average converts to 88.

## Approach 1
class Solution:
    def highFive(self, items: List[List[int]]) -> List[List[int]]:
        d = collections.defaultdict(list)
        res = []
        for i in items:
            d[i[0]].append(i[1])
        for idx, scores in d.items():
            res.append([idx, sum(sorted(scores)[-5:])//5])
        
        
        return sorted(res)


## Approach 2
class Solution:
    def highFive(self, items: List[List[int]]) -> List[List[int]]:
        items.sort(reverse=True)
        res = []
        curr = []
        idx = items[0][0]
        
        for i, val in items:
            if i == idx:
                if len(curr) < 5:
                    curr.append(val)
            else:
                res.append([idx, sum(curr) // len(curr)])
                curr = [val]
                idx = i
        
        res.append([idx, sum(curr) // len(curr)])
        
        res = res[::-1]
        
        return res

## 48 Rotate Image
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]


class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        self.transpose(matrix)
        self.reflect(matrix)
    
    def transpose(self, matrix):
        n = len(matrix)
        for i in range(n):
            for j in range(i, n):
                matrix[j][i], matrix[i][j] = matrix[i][j], matrix[j][i]

    def reflect(self, matrix):
        n = len(matrix)
        for i in range(n):
            for j in range(n // 2):
                matrix[i][j], matrix[i][-j - 1] = matrix[i][-j - 1], matrix[i][j]


##908 Smallest Range I
You are given an integer array nums and an integer k.
In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. 
You can apply this operation at most once for each index i.
The score of nums is the difference between the maximum and minimum elements in nums.
Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

 
Intuition: 
If min(A) + K < max(A) - K, then return max(A) - min(A) - 2 * K
If min(A) + K >= max(A) - K, then return 0

class Solution:
    def smallestRangeI(self, nums: List[int], k: int) -> int:
        min_score = 10000000
        return max(0, max(nums) - min(nums)-2*k )


##1710. Maximum Units on a Truck
You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:
numberOfBoxesi is the number of boxes of type i.
numberOfUnitsPerBoxi is the number of units in each box of the type i.
You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. 
You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.
Return the maximum total number of units that can be put on the truck.

Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.


class Solution:
    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:
        a = sorted(boxTypes, key = lambda x: x[1], reverse=True)
        print(a)
        res = 0
        for boxes, vol in a:
            if truckSize - boxes >= 0 :
                res += boxes*vol
                truckSize -= boxes
            elif truckSize - boxes < 0:
                res += truckSize * vol
                truckSize = 0
                break
        return res
                
### 1636 Sort Array by Increasing Frequency
Given an array of integers nums, sort the array in increasing order based on the frequency of the values. 
If multiple values have the same frequency, sort them in decreasing order.
Return the sorted array.

Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.


class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        d = collections.Counter(nums).most_common()
        ## most_common() would sort counter dict in the way you want
        #we need to sort by value decreasingly and then by frequency increasingly
        d.sort(key = lambda x: x[0], reverse = True)
        d.sort(key = lambda x: x[1])
        res = []
        for i in d:
            val, freq = i
            res.extend([val]*freq)
        return res
sort by values in the reverse order (-x) and then by their frequencies (r[x]) in direct order.        
class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        r = Counter(nums)
        return sorted(nums, key=lambda x: (r[x], -x))        
      
  








