### Kahn's Algorithm
Topological sorting helps solve the problem of pre-requisites. It provides a linear sorting based on the required ordering between vertices in directed acyclic graphs.
Limitation:
1). Topological sorting only works with graphs that are directed and acyclic
2). There is at least one vertex in the 'graph' with an 'in-degree' of 0. If all vertices in the 'graph' have non-zero 'in-degree', then all vertices need at least one vertex 
as a predecessor. In this case, no vertex can serve as the starting vertex. 




## 207 Course Schedule
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.


Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.



class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        g = collections.defaultdict(list)
        degree = {}
        for i in range(numCourses):
          degree[i] = 0
        for i,j in prerequisites:
          g[j].append(i)
          degree[i] += 1
        queue = []
        for i in range(numCourses):
          if degree[i] == 0:
            queue.append(i)
            
        course = []
        while queue:
          curr = queue.pop()
          del degree[curr]
          course.append(curr)
          for neighbor in g[curr]:
             degree[neighbor] -= 1
             if degree[neighbor] == 0:
                queue.append(neighbor)
       if len(course) == numCourses:
          return True
       else:
          return False
        
## 210 Course Schedule II
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, 
return an empty array.


Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. 
Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        g = collections.defaultdict(list)
        degree = {}
        for i in range(numCourses):
            degree[i] = 0
        for i, j in prerequisites:
            g[j].append(i)
            degree[i] += 1
            
        queue = []
        for i in range(numCourses):
            if degree[i] == 0:
                queue.append(i)
        course = []
        while queue:
            curr = queue.pop()
            del degree[curr]
            course.append(curr)
            for n in g[curr]:
                degree[n] -=1
                if degree[n] == 0:
                    queue.append(n)
        
        if len(course) < numCourses:
            return []
        else:
            return course



### 1976 Number of Ways to Arrive at Destination

class Solution:
    def countPaths(self, n: int, roads: List[List[int]]) -> int:
        g = collections.defaultdict(list)
        for i,j,time in roads:
            g[i].append((j,time))
            g[j].append((i,time))
        times = [inf] * n
        times[0] = 0
        
        ways = [0]*n
        ways[0] = 1
        priorityqueue = [(0,0)]  
        while priorityqueue:
            old_t, i = heappop(priorityqueue)
            for j,time in g[i]:
                new_t = old_t + time
                if new_t < times[j]:
                    heappush(priorityqueue, (new_t, j))
                    times[j] = new_t
                    ways[j] = ways[i]
                elif new_t == times[j]:
                    ways[j] += ways[i]
        
        mod = 10**9 + 7
        return ways[-1] % mod
        
        








