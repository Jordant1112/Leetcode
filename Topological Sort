## 207 Course Schedule
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.


Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.



class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        g = collections.defaultdict(list)
        degree = {}
        for i in range(numCourses):
          degree[i] = 0
        for i,j in prerequisites:
          g[j].append(i)
          degree[i] += 1
        queue = []
        for i in range(numCourses):
          if degree[i] == 0:
            queue.append(i)
            
        course = []
        while queue:
          curr = queue.pop()
          del degree[curr]
          course.append(curr)
          for neighbor in g[curr]:
             degree[neighbor] -= 1
             if degree[neighbor] == 0:
                course.append(neighbor)
       if len(course) == numCourses:
          return True
       else:
          return False
        















