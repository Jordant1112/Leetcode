## 202 Happy Number (龟兔赛跑问题)
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


class Solution:
    def isHappy(self, n: int) -> bool:
        def get_next(number):
            total_sum = 0
            while number > 0:
                number, digit = divmod(number, 10)
                total_sum += digit **2
            return total_sum
        
        slow = n
        fast = get_next(n)
        while fast != 1 and slow != fast:
            slow = get_next(slow)
            fast = get_next(get_next(fast))
        return fast == 1
        
### 345. Reverse Vowels of a String  
Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.
 Input: s = "hello"
Output: "holle"
class Solution(object):
    def reverseVowels(self, s):
        vowels = set(list("aeiouAEIOU"))
        s = list(s)
        ptr_1, ptr_2 = 0, len(s) - 1
        while ptr_1 < ptr_2:
            if s[ptr_1] in vowels and s[ptr_2] in vowels:
                s[ptr_1], s[ptr_2] = s[ptr_2], s[ptr_1]
                ptr_1 += 1
                ptr_2 -= 1
            if s[ptr_1] not in vowels:
                ptr_1 += 1
            if s[ptr_2] not in vowels:
                ptr_2 -= 1
        return ''.join(s)

## 680. Valid Palindrome II
Given a string s, return true if the s can be palindrome after deleting at most one character from it.
Input: s = "aba"
Output: true

Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.

class Solution:
    def validPalindrome(self, s: str) -> bool:
        left = 0
        right = len(s)-1
        while left < right:
            if s[left] != s[right]:
                solution_1 = s[left:right]
                solution_2 = s[left+1: right+1]
                return solution_1 == solution_1[::-1] or solution_2 == solution_2[::-1]
            left +=1
            right -=1
        return True


## 392 Is Subsequence
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some 
(can be none) of the characters without disturbing the relative positions of the remaining characters. 
(i.e., "ace" is a subsequence of "abcde" while "aec" is not).

Input: s = "abc", t = "ahbgdc"
Output: true

Input: s = "axc", t = "ahbgdc"
Output: false

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        l_1 = len(s)
        l_2 = len(t)
        pointer1 = 0
        pointer2 = 0
        while pointer1 < l_1 and pointer2 < l_2:
            if s[pointer1] == t[pointer2]:
                pointer1 += 1
                pointer2 += 1
            else:
                pointer2 += 1
        return pointer1 == l_1
        



## 75 Sort Colors
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        left = 0
        right = len(nums)-1
        curr = 0
        
        while curr <= right:
            if nums[curr] ==0:
                nums[curr], nums[left] = nums[left] , nums[curr]
                left += 1
                curr += 1
            elif nums[curr] == 2:
                nums[curr], nums[right] = nums[right], nums[curr]
                right -= 1
            else:
                curr +=1 
        return nums


##246 Strobogrammatic number
Given a string num which represents an integer, return true if num is a strobogrammatic number.
A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).


Input: num = "69"
Output: true

Input: num = "88"
Output: true

Input: num = "962"
Output: false
## Approach 1
class Solution:
    def isStrobogrammatic(self, num: str) -> bool:
        rotated_string = []
        for char in reversed(num):
            if char in {'0','1','8'}:
                rotated_string.append(char)
            elif char =='6':
                rotated_string.append('9')
            elif char =='9':
                rotated_string.append('6')
            else：
                return False
        s = ''.join(rotated_string)
        return s == num
## Approach 2
Hashmap
class Solution:
    def isStrobogrammatic(self, num: str) -> bool:
        d = {
          '1': '1',
          '2': '*',
          '3': '*',
          '4': '*',
          '5': '*',
          '6': '9',
          '7': '*',
          '8': '8',
          '9': '6'
        }
        s = ''
        for char in num:
            s += d[char]
        return s[::-1] == num


## 844 Backspace String Compare
Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".

Input: s = "a##c", t = "#a#c"
Output: true
Explanation: Both s and t become "c".

class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        def build(s):
            ans = []
            for c in s:
                if c != '#':
                    ans.append(c)
                elif ans:
                    ans.pop()
            return ''.join(ans)
         return build(s) == build(t)
### You can also use two pointer to go through the string s and t


###1570. Dot Product of Two Sparse Vectors
Given two sparse vectors, compute their dot product.

Implement class SparseVector:

SparseVector(nums) Initializes the object with the vector nums
dotProduct(vec) Compute the dot product between the instance of SparseVector and vec
A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.

Follow up: What if only one of the vectors is sparse?

Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
Output: 8
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8

class SparseVector:
    def __init__(self, nums: List[int]):
        self.nonzeros = {}
        for i, n in enumerate(nums):
            if n != 0:
                self.nonzeros[i] = n
    def dotProduct(self, vec: 'SparseVector') -> int:
        res = 0
        for i, n in self.nonzeros.items():
            if i in vec.nonzeros:
                res += vec.nonzeros[i] * n
        return res


###  16. 3sum cloest
Given an integer array nums of length n and an integer target, 
find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.


Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        diff = float('inf')
        for i in range(len(nums)):
            lo = i +1
            hi = len(nums)-1
            s = nums[i] + nums[lo] + nums[hi]
            if abs(s - target) < abs(diff):
                diff = target - s
            if s < target:
                lo += 1
            else：
                hi -= 1
            if diff == 0:
                break
       return target - diff
       



##31 Next Permutation
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

 
Input: nums = [1,2,3]
Output: [1,3,2]

Input: nums = [3,2,1]
Output: [1,2,3]

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        l = len(nums)-2
        while l >=0 and nums[l+1] <=nums[l]:
            l -= 1
        if l >=0:
            r = len(nums)-1
            while nums[r] <= nums[l]:
                r -= 1
                self.swap(nums, l, r)
        self.reverse(nums, l+1, len(nums)-1)
        return nums
        
    def swap(self, nums, l, r):
        nums[l], nums[r] = nums[r], nums[l]
    
    def reverse(self, nums, l, r):
        while l < r:
            self.swap(nums, l, r)
            l +=1 
            r -= 1
            
        
  ## 45 Jump Game II
  Given an array of non-negative integers nums, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
You can assume that you can always reach the last index.        
        
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Class Solution:
    def Jump(self, nums) -> int:
        if len(nums)<=1:
            return 0
        l = 0 
        r = nums[0]
        times = 1
        while r < len(nums)-1:
            times +=1
            nxt = max(i + nums[i] for i in range(l, r+1)
            l, r = r, nxt
        return times
        


# 5 Longest Palindromic Substring
Given a string s, return the longest palindromic substring in s

Input: s = 'babad'
output: bab

class solution:
    def longestPalindrome(self, s)-> str:
        res = ''
        for i in range(len(s)):
            output = self.helper(s,i,i).  ## odd situation
            if len(output)> len(res):
                res = output
            output = self.helper(s,i,i+1)
            if len(output)> len(res):
                res = output
        return res
    def helper(self, s, i, j):
        while i >=0 and j <= len(s)-1 and s[i]==s[j]:
            i -= 1
            j +=1
        return s[i+1:j]



## 15. 3Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []
        for i in range(len(nums):
            if nums[i] > 0:
                break
            if i == 0 or nums[i-1] != nums[i]:
                self.twoSum(nums, i, res)
        return res
    def twoSum(self, nums, i, res):
        l = i+1
        h = len(nums)-1
        while l < h:
            s = nums[i] + nums[l] + nums[h]
            if s < 0:
                l +=1
            elif s > 0:
                r +=1
            else:
                res.append((nums[i], nums[l], nums[h]))
                l +=1
                h -=1
                while l < h and nums[l] == nums[l-1]:
                    l +=1









