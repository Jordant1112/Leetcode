### 875 Koko Eating Bananas
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.
Input: piles = [3,6,7,11], h = 8
Output: 4
Input: piles = [30,11,23,4,20], h = 5
Output: 30

def minEatingSpeed(self, piles: List[int], h: int) -> int:
  def possible(k):
    return sum((p-1)/ k +1 for p in piles) <= H
  
  l , r = 1, max(piles)
  while l < r:
    mid = l + (r-l)//2
    if possible(mid):
      r = mid
    else:
      l = mid + 1
  
  return l
  
  
##1099 Two Sum Less Than K
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.

Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.

def twoSumLessThanK(self, nums: List[int], k: int) -> int:
  nums.sort()
  l = 0
  r = len(nums)-1
  ans = -1
  while l < r:
    mid = l + (r-l)//w
    if nums[l] + nums[r] < k:
      ans = max(ans, nums[l]+nums[r])
      l += 1
    else:
      r -=1
   return ans
   
   



