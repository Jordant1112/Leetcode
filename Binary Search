### Binary Search Template

def binary_search(self, nums, target):
  if not nums:
    return -1
  start, end = 0, len(nums)-1
  while start +1 < end:
    mid = start + (end - start) //2
    if nums[mid] < target:
      start = mid
    elif nums[mid] == target:
      end = mid
    else:
      end = mid
  if nums[start] == target:
    return start
  if nums[end] == target:
    return end
  return -1
  
  




### 875 Koko Eating Bananas
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.
Input: piles = [3,6,7,11], h = 8
Output: 4
Input: piles = [30,11,23,4,20], h = 5
Output: 30

def minEatingSpeed(self, piles: List[int], h: int) -> int:
  def possible(k):
    return sum((p-1)/ k +1 for p in piles) <= H
  
  l , r = 1, max(piles)
  while l < r:
    mid = l + (r-l)//2
    if possible(mid):
      r = mid
    else:
      l = mid + 1
  
  return l
  
  
##1099 Two Sum Less Than K
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.

Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.

def twoSumLessThanK(self, nums: List[int], k: int) -> int:
  nums.sort()
  l = 0
  r = len(nums)-1
  ans = -1
  while l < r:
    mid = l + (r-l)//w
    if nums[l] + nums[r] < k:
      ans = max(ans, nums[l]+nums[r])
      l += 1
    else:
      r -=1
   return ans
   
   
###1539 Kth Missing Positive Number
Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.
Find the kth positive integer that is missing from this array.
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.

Explanation and thoughts:
I really like this problem, because you do not stop when you find linear solution, and you can do better! What can be better, than linear solution? Usually it is solution with complexity O(log n). Now, we have two good indicators, that we need to use binary search: sorted data and O(log n) complexity. Let us look for the following example for more understanding:
2, 3, 4, 7, 11, 12 and k = 5. We need to find place, of k-th missing positive number, so, let us create virtual list (virtual, because we will not compute it full, but only elements we need):

B = [2 - 1, 3 - 2, 4 - 3, 7 - 4, 11 - 5, 12 - 6] = [1, 1, 1, 3, 6, 6].

What this list represents is how many missing numbers we have for each inex: for first number we have missing number [1], for next two iterations also, when we add 7, we have 3 missing numbers: [1, 5, 6], when we add 11, we have 6 missing numbers: [1, 5, 6, 8, 9, 10]. How we evalaute values of list B? Very easy, it is just A[i] - i - 1.
What we need to find now in array B: first element, which is greater or equal than k. In our example, we have [1, 1, 1, 3, 6, 6]. We will find it with binary search: this element have index end = 4. Finally, we need to go back to original data, we have

arr = [2, 3, 4, 7, 11, 12]
B = [1, 1, 1, 3, 6, 6]

So, what we now know that our answer is between numbers 7 and 11 and it is equal to arr[end] - (B[end] - k + 1), where the second part is how many steps we need to make backward. Using B[end] = arr[end] - end - 1, we have end + k, we need to return.

def findKthPositive(self, arr: List[int], k:int) -> int:
  l, r = 0, len(arr)
  while l < r:
    mid = l + (r-l)//2
    if arr[mid] - mid -1 < k:
      l = mid+1
    else:
      r = mid
  return r + k
 
 

