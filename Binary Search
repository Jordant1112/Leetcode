### Binary Search Template

## Most Generalized Binary Search:
 def binary_search(array) -> int:
  def condition(value) -> bool:
    pass
   left, right = 0, len(array)
   while left < right:
    mid = left + (right - left) //2
    if condition(mid):
      right = mid
    else:
      left = mid+1
   return left
   
https://weixia.info/binary-search-template.html   
### Three parts of Binary Search
1). Pre-processing - Sort if collection is unsorted
2). Binary Search - Using a loop or recursion to divide search space in half after each comparison
3). Post-processing - Determine viable candidates in the remaining space.


### Template 4 ###
def binarySearch(nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: int
    """
    if len(nums) == 0:
        return -1

    left, right = 0, len(nums)
    while left < right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid

    # Post-processing:
    # End Condition: left == right
    if left != len(nums) and nums[left] == target:
        return left
    return -1
It is used to search for an element or condition which requires accessing the current index and its immediate right neighbor’s index in the array.


### Template  5 ####
def binarySearch(nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: int
    """
    if len(nums) == 0:
        return -1

    left, right = 0, len(nums) - 1
    while left + 1 < right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid
        else:
            right = mid

    # Post-processing:
    # End Condition: left + 1 == right
    if nums[left] == target: return left
    if nums[right] == target: return right
    return -1
It is used to search for an element or condition which requires accessing the current index and its immediate left and right neighbor’s index in the array.    
  


def binary_search(self, nums, target):
  if not nums:
    return -1
  start, end = 0, len(nums)-1
  while start +1 < end:
    mid = start + (end - start) //2
    if nums[mid] < target:
      start = mid
    elif nums[mid] == target:
      end = mid
    else:
      end = mid
  if nums[start] == target:
    return start
  if nums[end] == target:
    return end
  return -1
  
  




### 875 Koko Eating Bananas
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.
Input: piles = [3,6,7,11], h = 8
Output: 4
Input: piles = [30,11,23,4,20], h = 5
Output: 30

def minEatingSpeed(self, piles: List[int], h: int) -> int:
  def possible(k):
    return sum((p-1)/ k +1 for p in piles) <= H
  
  l , r = 1, max(piles)
  while l < r:
    mid = l + (r-l)//2
    if possible(mid):
      r = mid
    else:
      l = mid + 1
  
  return l
  
  
##1099 Two Sum Less Than K
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.

Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.

def twoSumLessThanK(self, nums: List[int], k: int) -> int:
  nums.sort()
  l = 0
  r = len(nums)-1
  ans = -1
  while l < r:
    mid = l + (r-l)//2
    if nums[l] + nums[r] < k:
      ans = max(ans, nums[l]+nums[r])
      l += 1
    else:
      r -=1
   return ans
   
   
###1539 Kth Missing Positive Number
Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.
Find the kth positive integer that is missing from this array.
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.

Explanation and thoughts:
I really like this problem, because you do not stop when you find linear solution, and you can do better! What can be better, than linear solution? Usually it is solution with complexity O(log n). Now, we have two good indicators, that we need to use binary search: sorted data and O(log n) complexity. Let us look for the following example for more understanding:
2, 3, 4, 7, 11, 12 and k = 5. We need to find place, of k-th missing positive number, so, let us create virtual list (virtual, because we will not compute it full, but only elements we need):

B = [2 - 1, 3 - 2, 4 - 3, 7 - 4, 11 - 5, 12 - 6] = [1, 1, 1, 3, 6, 6].

What this list represents is how many missing numbers we have for each inex: for first number we have missing number [1], for next two iterations also, when we add 7, we have 3 missing numbers: [1, 5, 6], when we add 11, we have 6 missing numbers: [1, 5, 6, 8, 9, 10]. How we evalaute values of list B? Very easy, it is just A[i] - i - 1.
What we need to find now in array B: first element, which is greater or equal than k. In our example, we have [1, 1, 1, 3, 6, 6]. We will find it with binary search: this element have index end = 4. Finally, we need to go back to original data, we have

arr = [2, 3, 4, 7, 11, 12]
B = [1, 1, 1, 3, 6, 6]

So, what we now know that our answer is between numbers 7 and 11 and it is equal to arr[end] - (B[end] - k + 1), where the second part is how many steps we need to make backward. Using B[end] = arr[end] - end - 1, we have end + k, we need to return.

def findKthPositive(self, arr: List[int], k:int) -> int:
  l, r = 0, len(arr)
  while l < r:
    mid = l + (r-l)//2
    if arr[mid] - mid -1 < k:
      l = mid+1
    else:
      r = mid
  return r + k
 
 
## 441 Arranging Coins
You have n coins and you want to build a staircase with these coins. 
The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.
Given the integer n, return the number of complete rows of the staircase you will build.
Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.
################
Note: The start should be 1 in this case
################
class Solution:
    def arrangeCoins(self, n: int) -> int:
        lo, hi = 1,n
        while lo + 1 < hi:
            mid = lo + (hi-lo)//2
            k_rows = mid*(mid+1)//2
            if k_rows == n:
                return mid
            elif k_rows < n:
                lo = mid
            else:
                hi = mid
        return min(lo,hi)    

1011. Capacity To Ship Packages Within D Days
A conveyor belt has packages that must be shipped from one port to another within days days.
The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). 
We may not load more weight than the maximum weight capacity of the ship.
Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.
Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10


class Solution:
 def shipWithinDays(self, weights: List[int], days: int) -> int:
  l, r  = max(weights), sum(weights)   
  self.D = days
  while l < r:
   mid = l + (r-l)//2
   if self.capacity(weights, mid):
     r = mid
   else:
     l = mid + 1
 return l
   
   
   
 def capacity(self, weights, capacity):
  total = 0
  days = 1
  for weight in weights:
   total += weight
   if total > capacity:
    total = weight
    days += 1
    if days > self.D:
     return False
  return True


## 74 Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


class Solution:
 def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
   m = len(matrix)
   n = len(matrix[0])
   if m == 0:
    return False
    
   l, r = 0, m*n-1
   while l <= r:
    mid = l + (r-l)//2
    if target == matrix[mid//n][mid%n]:
      return True
    else:
      if target < matrix[mid//n][mid % n]:
        r = mid -1
      else:
       l = mid + 1
  return False
   
### 888 Fair Candy Swap
Alice and Bob have a different total number of candies. 
You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j]
is the number of candies of the jth box of candy that Bob has.
Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy.
The total amount of candy a person has is the sum of the number of candies in each box they have.
Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, 
and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. 
It is guaranteed that at least one answer exists.
   
   
Input: aliceSizes = [1,1], bobSizes = [2,2]
Output: [1,2]

class Solution:
  def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:
        aliceSizes.sort()
        bobSizes.sort()
        sumalice = sum(aliceSizes)
        sumbob = sum(bobSizes)
        
        for i in range(len(aliceSizes)):
            l = 0
            r = len(bobSizes)-1
        
            while l <= r:
                mid = l + (r-l)//2
                if sumalice - aliceSizes[i] + bobSizes[mid] == sumbob+ aliceSizes[i] -\
                bobSizes[mid]:
                    ans = []
                    ans.append(aliceSizes[i])
                    ans.append(bobSizes[mid])
                    return ans
                elif sumalice - aliceSizes[i] + bobSizes[mid] < sumbob+ aliceSizes[i] -\
                bobSizes[mid]:
                    l = mid +1
                else:
                    r = mid -1
            
   
## 475. Heaters
Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.
Every house can be warmed, as long as the house is within the heater's warm radius range. 
Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.
Notice that all the heaters follow your radius standard, and the warm radius will the same.

Input: houses = [1,2,3], heaters = [2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.

Input: houses = [1,2,3,4], heaters = [1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.




class Solution:
 def findRadius(self, houses: List[int], heaters: List[int]) -> int:
  houses.sort()
  heaters = [float('-inf')] + sorted(heaters) + [float('inf')]
  r = 0
  for h in houses:
   i = bisect.bisect(heaters, h)
   r = max(r, min(h - heaters[i-1], heaters[i] - h))
  
  return r
  
  
class Solution(object):
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        res = 0
        heaters.sort()
        for houseNum in houses:
            indx =  self.binary_search(heaters, houseNum)
            if indx == len(heaters):
                res = max(res, houseNum - heaters[-1])
            elif indx == 0: 
                res = max(res, heaters[0] - houseNum)
            else:
                 res = max(res, min(heaters[indx] - houseNum, houseNum - heaters[indx-1]))
        return res
    def binary_search(self, heaters, target):
        l = 0
        r = len(heaters)-1
        while l <= r:
            mid = l + (r-l)//2
            if  target > heaters[mid]:
                l = mid+1
            else:
                r = mid-1
        return l
                  

### 1182 Shortest Distance to Target Color

You are given an array colors, in which there are three colors: 1, 2 and 3.
You are also given some queries. Each query consists of two integers i and c, return the shortest distance between the given index i and the target color c. 
If there is no solution return -1.

Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).
The nearest 2 from index 2 is at index 2 itself (0 steps away).
The nearest 1 from index 6 is at index 3 (3 steps away).

Input: colors = [1,2], queries = [[0,3]]
Output: [-1]
Explanation: There is no 3 in the array.

class Solution:
 def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:
      h = collections.defaultdict(list)
      for idx, color in enumerate(colors):
        h[color].append(i)
      
      res = []
      for i, (idx, color) in enumerate(queries):
        if color not in h:
           res.append(-1)
           continue
        index_list = h[color]
        insert = bisect.bisect(index_list, idx)
        ###Note: need to check if the insert position is out of bound
        left_nearest = abs(index_list[max(0, insert-1)] - idx)
        right_nearest = abs(index_list[min(insert, len(index_list)-1)] - idx)
        res.append(right_nearest, left_nearest)
      return res
        


## 1060 Missing Element in Sorted Array

Given an integer array nums which is sorted in ascending order and all of its elements are unique and given also an integer k, 
return the kth missing number starting from the leftmost number of the array.

Input: nums = [4,7,9,10], k = 1
Output: 5
Explanation: The first missing number is 5.

Input: nums = [4,7,9,10], k = 3
Output: 8
Explanation: The missing numbers are [5,6,8,...], hence the third missing number is 8.

class Solution:
 def missingElement(self, nums: List[int], k:int) -> int:
   diff = nums[-1] - nums[0] + 1
   missing = diff - len(nums)
   if k > missing:
     return nums[-1] + k - missing
   
   left = 0 
   right = len(nums)-1
   while left +1 < right:
     m = left + (right - left)//2
     missing = nums[m] - nums[left] - m + left
     if missing < k:
      left = m
      k -= missing     ## keyKEY: move left forward, we need to minus the missing words of this range
     else:
      right = m
   return nums[left] + k


## 1891 Cutting Ribbons
You are given an integer array ribbons, where ribbons[i] represents the length of the ith ribbon, and an integer k. 
You may cut any of the ribbons into any number of segments of positive integer lengths, or perform no cuts at all.

For example, if you have a ribbon of length 4, you can:
Keep the ribbon of length 4,
Cut it into one ribbon of length 3 and one ribbon of length 1,
Cut it into two ribbons of length 2,
Cut it into one ribbon of length 2 and two ribbons of length 1, or
Cut it into four ribbons of length 1.
Your goal is to obtain k ribbons of all the same positive integer length. You are allowed to throw away any excess ribbon as a result of cutting.
Return the maximum possible positive integer length that you can obtain k ribbons of, or 0 if you cannot obtain k ribbons of the same length.


Input: ribbons = [9,7,5], k = 3
Output: 5
Explanation:
- Cut the first ribbon to two ribbons, one of length 5 and one of length 4.
- Cut the second ribbon to two ribbons, one of length 5 and one of length 2.
- Keep the third ribbon as it is.
Now you have 3 ribbons of length 5.

Input: ribbons = [7,5,9], k = 4
Output: 4
Explanation:
- Cut the first ribbon to two ribbons, one of length 4 and one of length 3.
- Cut the second ribbon to two ribbons, one of length 4 and one of length 1.
- Cut the third ribbon to three ribbons, two of length 4 and one of length 1.
Now you have 4 ribbons of length 4.

class Solution:
    def maxLength(self, ribbons: List[int], k: int) -> int:
        total = sum(ribbons)
        if k > sum(ribbons):
            return 0
        l = 1
        r = max(ribbons) + 1
        res = 0
        while l < r:
            mid = l + (r-l)//2
            if self.helper(mid, ribbons, k):
                res = max(res,mid)
                l = mid+1
            else:
                r = mid
        return res
    def helper(self, x, ribbons, k):
        res = 0
        for i in ribbons:
            res += i // x
            if res >= k:
                return True
        return False



## 1062 Longest Repeating Substring
Given a string s, find out the length of the longest repeating substring(s). Return 0 if no repeating substring exists.
Input: s = "abcd"
Output: 0
Explanation: There is no repeating substring.

Input: s = "abbaba"
Output: 2
Explanation: The longest repeating substrings are "ab" and "ba", each of which occurs twice.

Input: s = "aabcaabdaab"
Output: 3
Explanation: The longest repeating substring is "aab", which occurs 3 times.

class Solution:
    def longestRepeatingSubstring(self, s: str) -> int:
        n = len(s)
        l = 1
        r = n
        while l <= r:
            m = l + (r-l)//2
            if self.search(m, n, s) != -1:
                l = m +1
            else:
                r = m-1
        return l-1
    
    
    def search(self, L, n, s) -> str:
        seen = set()
        for start in range(0, n-L+1):
            tmp = s[start:start+L]
            if tmp in seen:
                return start
            seen.add(tmp)
        return -1


##611  valid triangle number

Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
Input: nums = [2,2,3,4]
Output: 3
Explanation: Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3

Input: nums = [4,2,3,4]
Output: 4

class Solution:
    def triangleNumber(self, nums: List[int]) -> int:
        nums.sort()
        count = 0
        for k in range(2,len(nums)):
            j = k-1
            i = 0
            while i < j:
                if nums[i] + nums[j] > nums[k]:
                    count += j - i
                    j -= 1
                else:
                    i += 1
        return count
                    
## 1027 Longest Arithmetic Subsequence

Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.

Recall that a subsequence of an array nums is a list nums[i1], nums[i2], ..., nums[ik] with 0 <= i1 < i2 < ... < ik <= nums.length - 1, 
and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).


Input: nums = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.

Input: nums = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].

class Solution:
    def longestArithSeqLength(self, nums: List[int]) -> int:
        dp = {}
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                dp[j, nums[j] - nums[i]] = dp.get((i,nums[j] - nums[i]),1) + 1
        return max(dp.values())
 
## 1552 Magnetic Force Between Two Balls
In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. 
Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic 
force between any two balls is maximum.
Rick stated that magnetic force between two different balls at positions x and y is |x - y|.
Given the integer array position and the integer m. Return the required force.

Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. 
The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.


class Solution:
  def maxDistance(self, position: List[int], m:int) -> int:
    position.sort()
    n = len(position)
    l = 0
    r = position[-1] - position[0]
    while l <= r:
      mid = l + (r-l)//2
      if self.helper(position, mid) >= m:
          l = mid + 1
      else:
          r = mid -1
    return r
    
  def helper(self, position, d):
    ans = 1
    curr = position[0]
    for i in range(1,len(position)):
       if position[i] - curr >= d:
          ans += 1
          curr = position[i]
    return ans
    
 
 ## 300 Longest Increasing Subsequence ### It is a DP problem rather than binary search
 Given an integer array nums, return the length of the longest strictly increasing subsequence.
A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. 
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Input: nums = [0,1,0,3,2,3]
Output: 4

### Approach 1 Intelligently Build a Subsequence

class Solution:
 def lengthOfLIS(self, nums: List[int]) -> int:
    sub = [nums[0]]
    for num in nums[1:]:
      if num > sub[-1]:
         sub.append(num)
      else:
        i = 0
        while num > sub[i]:
          i += 1
        sub[i] = num
    return len(sub)

 ## Approach 2 DP
class Solution:
 def lengthOfLIS(self, nums: List[int]) -> int:
   dp = [1] * len(nums)
   for i in range(1:len(nums)):
     for j in range(i):
        if nums[i] > nums[j]:
          dp[i] = max(dp[i], dp[j] + 1)
   return max(dp)

## 825 Friends of Appropriate Ages
There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.

A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:

age[y] <= 0.5 * age[x] + 7
age[y] > age[x]
age[y] > 100 && age[x] < 100
Otherwise, x will send a friend request to y.

Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.

Return the total number of friend requests made.


Input: ages = [16,16]
Output: 2
Explanation: 2 people friend request each other.

Input: ages = [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.

class Solution:
    def numFriendRequests(self, ages: List[int]) -> int:
        cnt = 0
        N = len(ages)
        ages.sort()
        for i in range(N):
            a = ages[i]
            idx1 = bisect.bisect(ages, a)
            idx2 = bisect.bisect(ages, 0.5 * a + 7)
            cnt += max(0, idx1 - idx2 - 1) 
        return cnt


658. Find K Closest Elements
Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.
An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]


class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        left = 0
        right = len(arr) - k
        while left < right:
            mid = (left + right) //2
            if x - arr[mid] > arr[mid + k] -x:
                left = mid + 1
            else:
                right = mid
        return arr[left:left + k]



744. Find Smallest Letter Greater Than Target
Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.
Note that the letters wrap around.
For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'.

Input: letters = ["c","f","j"], target = "a"
Output: "c"


class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        index = bisect.bisect(letters, target)
        return letters[index % len(letters)]
    
        


class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        strt=0
        end=len(arr)-1
        res=arr[0]
        while strt<=end:
            mid=strt+(end-strt)//2
            if ord(arr[mid])>ord(t):
                res=arr[mid]
                end=mid-1
            else:
                strt=mid+1
        return res


1488. Avoid Flood in The City
Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. 
If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.

Given an integer array rains where:

rains[i] > 0 means there will be rains over the rains[i] lake.
rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.
Return an array ans where:

ans.length == rains.length
ans[i] == -1 if rains[i] > 0.
ans[i] is the lake you choose to dry in the ith day if rains[i] == 0.
If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)


Input: rains = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day full lakes are [1,2,3]
After the fourth day full lakes are [1,2,3,4]
There's no day to dry any lake and there is no flood in any lake.


Input: rains = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day, we dry lake 2. Full lakes are [1]
After the fourth day, we dry lake 1. There is no full lakes.
After the fifth day, full lakes are [2].
After the sixth day, full lakes are [1,2].
It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.


Input: rains = [69,0,0,0,69]
Output: [-1,69,1,1,-1]
Explanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9



class Solution:
  def avoidFlood(self, rains: List[int]) -> List[int]:
      dic = colections.defaultdict(list)
      ret = [-1]*len(rains)
      to_empty = []
      
      for day, lake in enumerate(rains):
        dic[lake].append(day)
      
      for i in range(len(rains)):
        lake = rains[i]
        if lake:
           if dic[lake] and dic[lake][0] < i:
             return []
           if dic[lake] and len(dic[lake]) > 1:
             heapq.heappush(to_empty, dic[lake][1])
        else:
           if to_empty:
              ret[i] = rains[heapq.heappop(to_empty)]
           else:
              ret[i] = 1
      return ret

















