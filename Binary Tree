## 110 Balanced Binary Tree
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Input: root = [3,9,20,null,null,15,7]
Output: true

class Solution:
  def isBalanced(self, root: Optional[TreeNode]) -> bool:
    if not root:
      return True
    if abs(self.height(root.left) - self.height(root.right)) > 1:
      return False
    else:
      return self.isBalanced(root.left) and self.isBalanced(root.right)
  
  
  def height(self, root) -> int:
    if not root:
      return -1
    return 1 + max(self.height(root.left), self.height(root.right))


## 1302 Deepest Leaves Sum
Given the root of a binary tree, return the sum of values of its deepest leaves.

class Solution:
    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:
        self.res = []
        self.depth = 0
        self.inorder(root,0)
        print(self.res)
        return sum(self.res[-1])
    
    def inorder(self, root, depth):
        if len(self.res) < depth:
            self.res.append([])
            
        if root:
            self.inorder(root.left, depth+1)   
            self.inorder(root.right, depth +1)
            self.res[depth].append(root.val)
            
## 654. Maximum Binary Tree
You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:

Create a root node whose value is the maximum value in nums.
Recursively build the left subtree on the subarray prefix to the left of the maximum value.
Recursively build the right subtree on the subarray suffix to the right of the maximum value.
Return the maximum binary tree built from nums.

class Solution:
    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:
        if len(nums) == 0:
            return 
        m = max(nums)
        index = nums.index(m)
        print(index)
        root = TreeNode(max(nums))
        
        root.left = self.constructMaximumBinaryTree(nums[:index])
        root.right = self.constructMaximumBinaryTree(nums[index+1:])
        
        return root


513. Find Bottom Left Tree Value
Given the root of a binary tree, return the leftmost value in the last row of the tree.
class Solution:
    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
        self.res = []
        self.inorder(root,0)
        return self.res[-1][0]
    
    
    def inorder(self, root, depth):
        if len(self.res) < depth:
            self.res.append([])
        if root:
            self.inorder(root.left, depth + 1)
            self.res[depth].append(root.val)
            self.inorder(root.right, depth + 1)
