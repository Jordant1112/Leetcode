## 110 Balanced Binary Tree
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Input: root = [3,9,20,null,null,15,7]
Output: true

class Solution:
  def isBalanced(self, root: Optional[TreeNode]) -> bool:
    if not root:
      return True
    if abs(self.height(root.left) - self.height(root.right)) > 1:
      return False
    else:
      return self.isBalanced(root.left) and self.isBalanced(root.right)
  
  
  def height(self, root) -> int:
    if not root:
      return -1
    return 1 + max(self.height(root.left), self.height(root.right))


## 1302 Deepest Leaves Sum
Given the root of a binary tree, return the sum of values of its deepest leaves.

class Solution:
    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:
        self.res = []
        self.depth = 0
        self.inorder(root,0)
        print(self.res)
        return sum(self.res[-1])
    
    def inorder(self, root, depth):
        if len(self.res) < depth:
            self.res.append([])
            
        if root:
            self.inorder(root.left, depth+1)   
            self.inorder(root.right, depth +1)
            self.res[depth].append(root.val)
            



