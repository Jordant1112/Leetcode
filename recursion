### 1265. Print Immutable Linked List in Reverse
You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:

ImmutableListNode: An interface of immutable linked list, you are given the head of the list.
You need to use the following functions to access the linked list (you can't access the ImmutableListNode directly):

ImmutableListNode.printValue(): Print value of the current node.
ImmutableListNode.getNext(): Return the next node.
The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. 
In other words, you must operate the linked list using only the mentioned APIs.


Input: head = [1,2,3,4]
Output: [4,3,2,1]


# """
# This is the ImmutableListNode's API interface.
# You should not implement it, or speculate about its implementation.
# """
# class ImmutableListNode:
#     def printValue(self) -> None: # print the value of this node.
#     def getNext(self) -> 'ImmutableListNode': # return the next node.

class Solution:
    def printLinkedListInReverse(self, head: 'ImmutableListNode') -> None:
        res = []
        
        while head:
            res.append(head)
            head = head.getNext()
        
        for i in res[::-1]:
            i.printValue()
        
## 326 Power of Three
Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

## Recursion

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        
        if n == 1:
            return True
        if n == 3:
            return True
        elif n > 3:
            return self.isPowerOfThree(n/3)
        else:
            return False

### 894 All Possible Full Binary Trees
Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right\
Note: It has either 0 or 2 children

class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:
        res = []
        stack = []
        if n == 1:
            return [TreeNode(0)]
        for m in range(1, n-1, 2):
            for left in self.allPossibleFBT(m):
                for right in self.allPossibleFBT(n - m -1):
                    root = TreeNode(0)
                    root.left = left
                    root.right = right
                    res += [root]
        return res
            



 
