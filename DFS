### 589 N-ary Tree Preorder Traversal
Given the root of an n-ary tree, return the preorder traversal of its nodes' values.
Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Input: root = [1,null,3,2,4,null,5,6]
Output: [1,3,5,6,2,4]

"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""
### Recursive
class Solution:
    def preorder(self, root: 'Node') -> List[int]:
        self.res = []
        self.dfs(root, self.res)
        return self.res
    def dfs(self, root, res):
        if not root:
            return 
        res.append(root.val)
        for child in root.children:
            self.dfs(child, res)
            
            
## Iterative
Class Solution:
  def preorder(self, root: 'Node') -> List[int]:
    if not root:
      return []
    stack = [root,]
    res = []
    while stack:
      root = stack.pop()
      res.append(root.val)
      stack.append(root.children[::-1])
      #add the children of the temp into the stack in reverse order.
      # children of 1 = [3,2,4], if not reveresed then 4 will be popped out first from the stack.
      # if reversed then stack = [4,2,3]. Here 3 will pop out first.
      # This continues till the stack is empty.
    return res


### 116. Populating Next Right Pointers in Each Node
You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""


### DFS:
Class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return
        stack = [root]
        while stack:
            cur = stack.pop()
            if cur.left and cur.right:
                cur.left.next = cur.right
                if cur.next:
                    cur.right.next = cur.next.left
                stack.append(cur.right)
                stack.append(cur.left)
        return root

## Recursive
Class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return 
        if root and root.left and root.right:
            root.left.next = root.right
            if root.next:
                root.right.next = root.next.left
        self.connect(root.left)
        self.connect(root.right)
        return root

# BFS       
def connect(self, root: 'Node') -> 'Node':
    if not root:
        return 
    queue = [root]
    while queue:
        curr = queue.pop(0)
        if curr.left and curr.right:
            curr.left.next = curr.right
            if curr.next:
                curr.right.next = curr.next.left
            queue.append(curr.left)
            queue.append(curr.right)
    return root


## 590. N-ary Tree Postorder Traversal
Given the root of an n-ary tree, return the postorder traversal of its nodes' values.
Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

## Iterative
class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        if not root:
            return 
        res = []
        stack = [root]
        while stack:
            r = stack.pop()
            if r:
                res.append(r.val)
            for child in r.children:
                stack.append(child)
        return res[::-1]



## Recursive

class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        self.res = []
        if not root:
            return self.res
        self.dfs(root, self.res)
        return self.res
    
    def dfs(self, root, res):
        for child in root.children:
            self.dfs(child, res)
        res.append(root.val)
        















