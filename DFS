### 589 N-ary Tree Preorder Traversal
Given the root of an n-ary tree, return the preorder traversal of its nodes' values.
Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Input: root = [1,null,3,2,4,null,5,6]
Output: [1,3,5,6,2,4]

"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""
### Recursive
class Solution:
    def preorder(self, root: 'Node') -> List[int]:
        self.res = []
        self.dfs(root, self.res)
        return self.res
    def dfs(self, root, res):
        if not root:
            return 
        res.append(root.val)
        for child in root.children:
            self.dfs(child, res)
            
            
## Iterative
Class Solution:
  def preorder(self, root: 'Node') -> List[int]:
    if not root:
      return []
    stack = [root,]
    res = []
    while stack:
      root = stack.pop()
      res.append(root.val)
      stack.append(root.children[::-1])
      #add the children of the temp into the stack in reverse order.
      # children of 1 = [3,2,4], if not reveresed then 4 will be popped out first from the stack.
      # if reversed then stack = [4,2,3]. Here 3 will pop out first.
      # This continues till the stack is empty.
    return res


### 116. Populating Next Right Pointers in Each Node
You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""


### DFS:
Class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return
        stack = [root]
        while stack:
            cur = stack.pop()
            if cur.left and cur.right:
                cur.left.next = cur.right
                if cur.next:
                    cur.right.next = cur.next.left
                stack.append(cur.right)
                stack.append(cur.left)
        return root

## Recursive
Class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return 
        if root and root.left and root.right:
            root.left.next = root.right
            if root.next:
                root.right.next = root.next.left
        self.connect(root.left)
        self.connect(root.right)
        return root

# BFS       
def connect(self, root: 'Node') -> 'Node':
    if not root:
        return 
    queue = [root]
    while queue:
        curr = queue.pop(0)
        if curr.left and curr.right:
            curr.left.next = curr.right
            if curr.next:
                curr.right.next = curr.next.left
            queue.append(curr.left)
            queue.append(curr.right)
    return root


## 590. N-ary Tree Postorder Traversal
Given the root of an n-ary tree, return the postorder traversal of its nodes' values.
Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

## Iterative
class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        if not root:
            return 
        res = []
        stack = [root]
        while stack:
            r = stack.pop()
            if r:
                res.append(r.val)
            for child in r.children:
                stack.append(child)
        return res[::-1]



## Recursive

class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        self.res = []
        if not root:
            return self.res
        self.dfs(root, self.res)
        return self.res
    
    def dfs(self, root, res):
        for child in root.children:
            self.dfs(child, res)
        res.append(root.val)
        

### 559 Maximum depth of N-ary Tree
Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

Input: root = [1,null,3,2,4,null,5,6]
Output: 3

## iterative

class Solution:
    def maxDepth(self, root: 'Node') -> int:
        if not root:
            return 0
        stack = [(1, root)]
        depth = 0
        while stack:
            d, val = stack.pop()
            depth = max(depth, d)
            for c in val.children:
                stack.append((d+1, c))
        return depth



## recursive
class Solution:
    def maxDepth(self, root: 'Node') -> int:
        if not root:
            return 0
        elif not root.children:
            return 1
        else:
            h = [self.maxDepth(c) for c in root.children]
            return max(h)+1
            

## 463 Island Perimeter
You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.

Grid cells are connected horizontally/vertically (not diagonally). 
The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).
The island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. 
One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.


class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        rows = len(grid)
        cols = len(grid[0])
        
        result = 0
        for r in range(rows):
            for c in range(cols):
                if grid[r][c]==1:
                    if r == 0:
                        up = 0
                    else:
                        up = grid[r-1][c]
                    if c == 0:
                        left = 0
                    else:
                        left = grid[r][c-1]
                    if r == rows-1:
                        down = 0
                    else:
                        down = grid[r+1][c]
                    if c == cols-1:
                        right = 0
                    else:
                        right = grid[r][c+1]
                    result += 4 - (up+left+right+down)
        return result

 
## 1315 Sum of Nodes with Even-Valued Grandparent
Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. 
If there are no nodes with an even-valued grandparent, return 0.
A grandparent of a node is the parent of its parent if it exists.



### DFS

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumEvenGrandparent(self, root: TreeNode) -> int:
        self.s = 0
        self.dfs(root)
        return self.s
    
    
    def dfs(self, root):
        if not root:
            return self.s
        if root.val %2 == 0:
            if root.left:
                if root.left.left:
                    self.s += root.left.left.val
                if root.left.right:
                    self.s += root.left.right.val
            if root.right:
                if root.right.left:
                    self.s += root.right.left.val
                if root.right.right:
                    self.s += root.right.right.val
        self.dfs(root.left)
        self.dfs(root.right)


class Solution:
    def sumEvenGrandparent(self, root: TreeNode) -> int:
        
        def dfs(node: TreeNode, parent: TreeNode, grandParent: TreeNode):
            if not node:
                return
            nonlocal answer
            if parent and grandParent and grandParent.val % 2 == 0:
                answer += node.val
            dfs(node.left, node, parent)
            dfs(node.right, node, parent)

        answer = 0
        dfs(root, None, None)
        return answer


def sumEvenGrandparent(self, root: TreeNode) -> int:
	stack = [(root, None)]
	res = 0
	while stack:
		node, even_parent = stack.pop()
		if node.left:
			stack.append((node.left, node.val%2==0))
			if even_parent:
				res+=node.left.val
		if node.right:
			stack.append((node.right, node.val%2==0))
			if even_parent:
				res+=node.right.val
	return res


## 1325 Delete Leaves With A Given Value
Given a binary tree root and an integer target, delete all the leaf nodes with value target.
Note that once you delete a leaf node with value target, if it's parent node becomes a leaf node and has the value target, 
it should also be deleted (you need to continue doing that until you can't).

Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).


class Solution:
    def removeLeafNodes(self, root: Optional[TreeNode], target: int) -> Optional[TreeNode]:
        if root:
            root.left = self.removeLeafNodes(root.left, target)
            root.right = self.removeLeafNodes(root.right, target)
            if root.val != target or root.left or root.right:
                return root
            else:
                return None

 
## 542 01Matrix
Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
The distance between two adjacent cells is 1.

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
    	q = deque()
	for i in range(len(mat)):
		for j in range(len(mat[0]):
			if mat[i][j] == 0:
				q.append((i,j))
			else:
				mat[i][j] = -1
	while q:
		x,y = q.popleft()
		dirs = [(1,0),(-1,0), (0,1), (0,-1)]
		for r,c in dirs:
			newx, newy = x+r, y +c
			if mat[newx][newy] == -1 and 0<=len(newx)<= len(mat)-1 and 0 <= len(newy)<=len(mat[0])-1:
				mat[newx][newy] = mat[x][y] + 1
				q.append((newx, newy))
	return mat
	


##38 Count and Say

The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"


class Solution:
	def countAndSay(self, n:int)-> str:	
		res = '1'
		for i in range(n-1):
			res = self.helper(res)
		return res
		
		
	def helper(self, s):
		i = 0
		res = ''
		while i < len(s):
			c = 1
			while i +1 < len(s) and s[i] == s[i+1]:
				c +=1
				i +=1
			res += str(c)+s[i]
			i +=1
		return res
			
class Solution:
	def countAndSay(self, n:int)-> str:
		if n == 1:
			return '1'
		s = self.counAndSay(n-1)
		i = 0
		res = ''
		while i < len(s):
			c = 1
			while i +1 < len(s) and s[i] == s[i+1]:
				c +=1
				i +=1
			res += str(c) + s[i]
			i +=1
		return res




