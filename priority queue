### 1135  Connecting Cities With Minimum Cost
There are n cities labeled from 1 to n. You are given the integer n and an array connections where connections[i] = [xi, yi, costi] 
indicates that the cost of connecting city xi and city yi (bidirectional connection) is costi.
Return the minimum cost to connect all the n cities such that there is at least one path between each pair of cities. 
If it is impossible to connect all the n cities, return -1,
The cost is the sum of the connections' costs used.

Input: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: Choosing any 2 edges will connect all cities so we choose the minimum 2.


class Solution:
  def minimumCost(self, n, connections) -> int:
    
    d = collections.defaultdict(list)
    mini_heap = [(0,1)]
    visited = set()
    res = 0
    
    for i, j, c in connections:
      d[i].append((j,c))
      d[j].append((i,c))
    
    while mini_heap:
      c, i = heappop(mini_heap)
      if i in visited:
        continue
      else:
        visited.add(i)
        res += c
        if len(res) == n:
          return res
        else:
          for j, c in d[i]:
            if j in visited:
              continue
            else:
              heappush(mini_heap, (c,j))
    return -1



