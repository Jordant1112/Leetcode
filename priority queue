### 1135  Connecting Cities With Minimum Cost
There are n cities labeled from 1 to n. You are given the integer n and an array connections where connections[i] = [xi, yi, costi] 
indicates that the cost of connecting city xi and city yi (bidirectional connection) is costi.
Return the minimum cost to connect all the n cities such that there is at least one path between each pair of cities. 
If it is impossible to connect all the n cities, return -1,
The cost is the sum of the connections' costs used.

Input: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: Choosing any 2 edges will connect all cities so we choose the minimum 2.


class Solution:
  def minimumCost(self, n, connections) -> int:
    
    d = collections.defaultdict(list)
    mini_heap = [(0,1)]
    visited = set()
    res = 0
    
    for i, j, c in connections:
      d[i].append((j,c))
      d[j].append((i,c))
    
    while mini_heap:
      c, i = heappop(mini_heap)
      if i in visited:
        continue
      else:
        visited.add(i)
        res += c
        if len(res) == n:
          return res
        else:
          for j, c in d[i]:
            if j in visited:
              continue
            else:
              heappush(mini_heap, (c,j))
    return -1


### 378 Kth Smallest Element in a Sorted matrix
Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.
You must find a solution with a memory complexity better than O(n2).

Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13


## approach 1
class Solution:
  def KthSmallest(self, matrix, k) -> int:
    n = len(matrix)
    h = []
    for i in range(min(n,k):
      h.append([matrix[i][0],i,0])
    heapq.heapify(h)
    while k:
      val, r, c = heapq.heappop(h)
      if c < n-1:
        heapq.heappush(h, [matrix[r][c+1], r, c+1])
      k -=1
    return val

## approach 2 binary search
class Solution:
  def countLessequal(self, matrix, mid, smaller, larger):
    count = 0
    n = len(matrix)
    row = n-1
    col = 0
    while row >= 0 and col < n:
      if matrix[row][col] > mid:
        larger = min(larger, matrix[row][col)
        col -=1
      else:
        smaller = max(smaller, matrix[row][col])
        count += row +1
        col +=1
    return count, smaller, larger
  
  
  def kthSmallest(self, matrix, k) -> int:
    n = len(matrix)
    start = matrix[0][0]
    end = matrix[n-1][n-1]
    while start < end:
      mid = start + (end - start)//2
      smaller = matrix[0][0]
      larger = matrix[n-1][n-1]
      count, smaller, larger = self.countLessEqual(matrix, mid, smaller, larger)
      if count == k:
        return smaller
      if count < k:
        start = larger
      else:
        end = smaller
   return start
  
