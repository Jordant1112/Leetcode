## Combinations Template
# 77
def combination(self, n:int, k:int) -> List[List[int]]:
  if n == 0 or n < k:
    return []
  
  def backtrack(index, n, k, res):
    if len(res) == k:
      output.append(res[:])
    for i in range(index, n+1):
      res.append(i)
      backtrack(i+1, n, k, res)
      res.pop()
  output = []
  res = []
  backtrack(1,n,k,res)
  return output

# 17
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

def combination(self, digits: str) -> List[List[int]]:
  letters = {'2': ['a','b','c'], '3':['d','e','f'], '4':['g','h', 'i'], '5':['j','k', 'l'], \
                   '6': ['m','n','o'], '7':['p','q','r','s'], \
                  '8':['t','u','v'], '9': ['w','x','y','z']}
  
  if digits == '':
    return []
  
  def backtrack(index, output, res, digits):
    if index == len(digits):
      return output.append(''.join(res))
    for i in letters[digits[index]]:
      res.append(i)
      backtrack(index+1, output, res, digits)
      res.pop()
  
  output = []
  res = []
  backtrack(0,output,res,digits)
  return output


## Combination Sum
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]

def combinationsum(self, candidates, target):
  def backtrack(candidates, res, output, target):
    if target < 0:
      return []
    if target == 0:
      return output.append(res[:])
    for i in range(len(candidates)):
      res.append(candidates[i])
      backtrack(candidates[i:], res, output, target)
      res.pop()
  output = []
  res = []
  backtrack(candidates, res, output, target)
  return output
  
  
## Combination Sum II   ###Each number in candidates may only be used once in the combination
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
  
def backtrack(candidates, target, output, res, index):
  if target < 0:
    return []
  if target == 0:
    return output.append(res[:])
  for i in range(index, len(candidates)):
    if i > index and candidates[i] == candidates[i-1]:                           ### avoid duplicates, save time
      continue
    backtrack(candidates, target - candidates[i], output, res + [candidates[i]], i+1)
  
  
  output = []
  res = []
  backtrack(candidates, target, output, res, 0)
  return output

## Combination Sum III  216
######################################################################################################################################################################
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
#####################################################################################################################################################################

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
  if n == 0 or k > n:
    return []
  
  target = n
  def backtrack(n,k,index, output, res, target):
    if k < 0 or target < 0:
      return
    if target == 0 and k == 0:
      return output.append(res[:])
    
    for i in range(index, 10):                  ###only 1 to 9 are used
      res.append(i)
      backtrack(n,k - 1,i+1, output, res, target-i)
      res.pop()
      
   output = []
   res = []
   backtrack(n,k,1,output,res,target)
   return output




## Permutations Template
#46
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

def permute(self, nums: List[int]) -> List[List[int]]:
  if len(nums) == 0:
    return []
  
  def backtrack(index = 0):
    if index == len(nums):
      return output.append(res[:])
    for i in range(index, len(nums)):
      res.append(nums[index])
      backtrack(index+1)
      res.pop()
  output = []
  res = []
  backtrack()
  return output
  
## Permutations Template II
#47  
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
 
 def permute(self, nums: List[int]) -> List[List[int]]:
  if len(nums) == 0:
    return []
  
  def backtrack(output, res, nums, n):
    if len(res) == n:
      return output.append(res[:])
    for i in range(len(nums)):
      if i > 0 and nums[i] == nums[i-1]:
        continue
      backtrack(output, res+[nums[i]], nums[:i]+nums[i+1:],n)
  n = len(nums)
  output = []
  res = []
  backtrack(output, res, nums, n)
  return output
 

## Subsets 
## 78
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
def subsets(self, nums: List[int]) -> List[List[int]]:
  if len(nums) == 0:
    return []
  
  def backtrack(output, res, nums, n):
    if len(res)<= n:
      return output.append(res[:])
    backtrack(output, res+ nums[i], nums[i+1:], n)
  
  output = []
  res = []
  n = len(nums)
  backtrack(output, res, nums, n)
  return output
  
## Subsets II 90
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
  if len(nums) == 0:
    return []


##79 Word Search
Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

###Note: sequentially adjacent cells, backtrack with a direction to find the letter in word
def exist(self, board: List[List[str]], word:str) ->bool:
  def backtrack(i,j,word, board):
    if len(word) == 0:
      return True
    if i < 0 or i >= len(board) or j < 0 or j >= len(board[i]):
      return False
    if board[i][j] == word[0]:
      board[i][j] = '#'
      if backtrack(i+1, j, word[1:], board) or backtrack(i-1, j, word[1:], board) or backtrack(i, j+1, word[1:], board) or backtrack(i, j-1, word[1:], board):
        return True
      board[i][j] == word[0]
    return False
  
  for i in range(len(board)):
    for j in range(len(board[i])):
      if backtrack(i,j,word, board):
        return True
   return False
  
  

## 254 factor combinations
Numbers can be regarded as the product of their factors.
Given an integer n, return all possible combinations of its factors. You may return the answer in any order.
Input: n = 12
Output: [[2,6],[3,4],[2,2,3]]
Input: n = 37
Output: []

def getfactors(self, n:int) -> List[List[int]]:
  if n <=1:
    return []
  
  def backtrack(output, res, n, index):
    if len(res) > 0:
      res.append(n)
      output.append(res[:])
      res.pop()
    
    for i in range(index, int(math.sqrt(n))+1):
      res.append(i)
      backtrack(output,res, n//i, i)
      res.pop()
   
  output = []
  res = []
  backtrack(output, res, n, 2)
  return output


### 306 Additive Number
Input: "112358"
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
             
Input: "199100199"
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199
Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

def isAdditiveNumber(self, num: str) -> bool:
  def backtrack(num, res):
    if len(res) >= 3 and res[-1] != res[-2] + res[-3]:
      return False
    if not num and len(res) >= 3:
      return True
    
    for i in range(len(num)):
      curr = num[:i+1]
      if (curr[0] == 0 and len(curr) != 1):
        continue
      if backtrack(num[i+1:], res + int(curr)):
        return True
    return False
 return backtrack(num, [])
 
 
##1079 Letter Tile Possibilities
Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
 
Input: tiles = "AAABBC"
Output: 188

Thoughts: it is a permutation questions, but more like #47 that duplicates exists in the set.So we need to deal with the duplicates.

def numTilePossibilities(self, tiles:str) -> int:
 if len(tiles) == 0:
  return []
  
 
 def backtrack(tiles, output, res, n, output_set):
  if len(res) > 0:
    if res not in output_set:
      output_set.add(res)
    else:
      return
   
  for i in range(len(tiles)):
    backtrack(tiles[:i] + tiles[i+1:], output, res + tiles[i], n ,output_set)

  output_set = set()
  output = []
  res = ''
  n = len(tiles)
  backtrack(tiles, output, res, n, output_set)
  return len(output_set)



##93 Restore IP Addresses
Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.
A valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. 
For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses and "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses. 

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]

 Input: s = "0000"
Output: ["0.0.0.0"]


def restoreIpAddresses(self, s:str) -> List[str]:
  res = []
  output = []
  n = len(s)
  
  def backtrack(s, output, res, index,n):
    if len(res)==4 and index == n:
      output.append('.'.join(res))
      return
    
    if len(res)>4:
      return
    for i in range(index, min(index+3, len(s)):
      if s[index] == '0' and i > index:
        continue
      if int(s[index: i+1]) <= 255:
        backtrack(s, output, res + [s[index:i+1]], i+1, n )
      
    backtrack(s, output, res, 0, n)
    return output
        
  
 ### 113 Path Sum II
 Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. 
 Each path should be returned as a list of the node values, not node references.
A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.
 
 Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Thoughts: It is a typical backtracking problem but with tree. For traverse all the tree, there is no need to use for loop but just recursively call the backtrack function
until the end of the tree.
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

def pathSum(self, root: Optimal[TreeNode], targetSum: int) -> List[List[int]]:
  output = []
  res = []
  def backtrack(root, output, res, targetSum):
    if not root:
      return []
    if targetSum == root.val and root.left is None and root.right is None:
      return output.append(res[:] + [root.val])
    
    backtrack(root.left, output, res + [root.val], targetSum - root.val)
    backtrack(root.right, output, res + [root.val], targetSum - root.val)
  
  
  backtrack(root, output, res, targetSum)
  return output
 
 
##131 Palindrome Partitioning
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.
A palindrome string is a string that reads the same backward as forward.

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Input: s = "a"
Output: [["a"]]

Note: define a boolean function for isPalindrome, be careful with the index for backtrack


def partition(self, s: str) -> List[List[str]]:
  if not s:
    return []
  
  output = []
  res = []
  index = 0
  def isPalindrome(s):
    return s == s[::-1]
  
  def backtrack(s, output, res, index):
    if index >= len(s):
      output.append(res[:])
      return
    for i in range(index, len(s)):
      if isPalindrome(s[index:i+1]):
        res.append(s[index: i+1])
        backtrack(s, output, res, i+1)
        res.pop()
 backtrack(s, output,res, 0 )
 return output
  
  
## 22 Generate Parentheses
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Input: n = 1
Output: ["()"]

Note: be careful with the edge cases
def generateParenthesis(self, n:int) -> List[str]:
  if n == 0:
    return []
  if n==1:
    return ['()']
  
  output = []
  res = ''
  
  def backtrack(output,res, n, nOpen, nClose, s):
    if s < 0 or nClose < 0 or nOpen < 0:
      return
    if nOpen ==0 and nClose == 0:
      output.append(res)
      return
    if nOpen > 0:
        backtrack(output, res + '(', n, nOpen-1, nClose, s+1)
    if nClose > 0:
        backtrack(output, res + ')', n, nOpen, nClose -1, s-1)
  backtrack(output, res, n,n,n,0)
  return output
   


def generateParenthesis(self, n:int) -> List[str]:
    res = []
    ans = []
    backtrack(res,ans,0,0, n)
    return ans

def backtrack(res,ans,left, right, n):
  if len(res) == 2*n:
    return ans.append(''.join(res))
  if left < n:
    res.append('(')
    backtrack(res,ans,left +1, right, n)
    res.pop()
  if right < left:
    res.append(')')
    backtrack(res, ans, left, right+1, n)
    res.pop()
  









## 638 Shopping Offers
In LeetCode Store, there are n items to sell. Each item has a price. 
However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.
You are given an integer array price where price[i] is the price of the ith item, 
and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.
You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] 
(i.e., the last integer in the array) is the price of the ith offer.
Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. 
Note:
You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.
  

Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]
Output: 14
Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.


Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]
Output: 11
Explanation: The price of A is $2, and $3 for B, $4 for C. 
You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. 
You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. 
You cannot add more items, though only $9 for 2A ,2B and 1C.
  

def shoppingOffers(self, price: List[int], speical: List[List[int]], needs: List[int]) -> int:
  output = []
  res = []
  
  def backtrack(output, needs, speical):
    p = sum(price[i]* needs[i] for i in range(len(price)))
    ##consider the special cases
    for s in special:
      canUse = True
      for i in range(len(price)):
        needs[i] -= s[i]
        if needs[i] < 0:
          canUse = False
      if canUse:
        p = min(p, s[-1]+backtrack(output,needs,special))
      
      for i in range(len(price)):
        needs[i] += s[i]
    return p
 
 return backtrack(output,needs,special)
    
    
  
 ## 494 Target Sum
 Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

def findTargetSumWays(self, nums,target):
  
  def backtrack(index, curr, memo):
    if (index,curr) in memo:
      return memo[(index, curr)]
      
    if index == len(nums):
      if curr == target:
          return 1
      else:
          return 0
    
    ans = 0
    ans += backtrack(i+1, curr + nums[i], memo)
    ans += backtrack(i+1, curr - nums[i], memo)
    
    memo[(i,curr)] = ans
    return memo[i,curr]
  
  return backtrack(0,0,{})
  
##784 Letter Case Permutation
Given a string s, we can transform every letter individually to be lowercase or uppercase to create another string.
Return a list of all possible strings we could create. You can return the output in any order.

Input: s = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]

Input: s = "12345"
Output: ["12345"]

def letterCasePermutation(s):
  nums = ['0','1','2','3','4','5','6','7','8','9']
  def backtrack(s, output, res, index):
    if index == len(s):
      return output.append(res)
    
    if s[index] not in nums:
      backtrack(s, output, res + s[index].upper(), index+1)
      backtrack(s, output, res + s[index].lower(), index+1)
    else:
      backtrack(s,output, res + s[index], index+1)
   
  output = []
  res = ''
  backtrack(s, output, res, 0)
  return output
 

##526 Beautiful Arrangement
Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), 
either of the following is true:
perm[i] is divisible by i.
i is divisible by perm[i].
Given an integer n, return the number of the beautiful arrangements that you can construct.
Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1
 
def beautifularrangement(n):
  count = [0]
  nums = list(range(1,n+1))
  def backtrack(nums, count,index):
    n = len(nums)
    if n == 1:
      if nums[0] %index == 0 or index % nums[0] == 0:
        count[0] +=1
      else:
        return
    
    for i in range(n):
      if nums[i] % index == 0 or index % nums[i] == 0:
        backtrack(nums[:i] + nums[i+1:], count, index+1)
  backtrack(nums, count, 0)
  return count[0]
    

## 797 All Paths From Source to Target

Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.
The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

class Solution:
  def allPathsSourceTarget(self, graph: List[LIst[int]]) -> List[List[int]]:
    N = len(graph)-1
    output = []
    res = []
    
    def helper(node, res):
      if node == N:
        output.append(res)
        return
      for i in graph[node]:
        helper(i, res + [i])
   helper(0, [0])
   return output
    
## 1087. Brace Expansion
You are given a string s representing a list of words. Each letter in the word has one or more options.
If there is one option, the letter is represented as is.
If there is more than one option, then curly braces delimit the options. For example, "{a,b,c}" represents options ["a", "b", "c"].
For example, if s = "a{b,c}", the first character is always 'a', but the second character can be 'b' or 'c'. The original list is ["ab", "ac"].
Return all words that can be formed in this manner, sorted in lexicographical order.

Input: s = "{a,b}c{d,e}f"
Output: ["acdf","acef","bcdf","bcef"]

Input: s = "abcd"
Output: ["abcd"]

class Solution:
  def expand(self, s:str) -> List[str]:
    self.res = []
    self.helper(s, '')
    self.res.sort()
    return self.res
  def helper(self, s, word):
    if not s:
      return self.res.append(word)
    else:
      if s[0] == '{':
        i = s.find('}')
        for letter in s[1:i].split(','):
          self.helper(s[i+1:], word + letter)
      else:
        self.helper(s[1:], word + s[0])


## 1215. Stepping Numbers
A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.
For example, 321 is a stepping number while 421 is not.
Given two integers low and high, return a sorted list of all the stepping numbers in the inclusive range [low, high].


Input: low = 0, high = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

Input: low = 10, high = 15
Output: [10,12]

class Solution:
  def countSteppingNumbers(self, low: int, high: int) -> List[int]:
        self.q = set()
        for i in range(10):
            self.dfs(i, low, high)
        return sorted(self.q)
 
  def dfs(self, n, low, high):
      if n > high:
          return
      if n >= low:
          self.q.add(n)
      d = n % 10
      if d == 0:
          self.dfs(n*10 + 1, low, high)
      elif d == 9:
          self.dfs(n*10 + 8, low, high)
      else:
          self.dfs(n*10 +d +  1, low, high)
          self.dfs(n*10 + d - 1, low ,high)
            


## 1415 The k-th Lexicographical String of All Happy Strings of Length n:
A happy string is a string that:

consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.

Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"


class Solution:
    def getHappyString(self, n: int, k: int) -> str:
        res = ''
        output = []
        def backtrack(res):
            if len(res) == n:
                return output.append(res)
            for i in 'abc':
                if not res or res[-1] != i:
                    backtrack(res + i)
        backtrack(res)
        return output[k-1] if len(output) >= k else ''

## 1980 Find Unique Binary String
Given an array of strings nums containing n unique binary strings each of length n, 
return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.

class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        s = set(nums)
        print(s)
        n = len(nums[0])
        res = ''
        output = []
        self.backtrack(n, res, s, output)
        for i in output:
            if i not in s:
                return i
    def backtrack(self, n, res, s, output):
        if len(res) == n:
            return output.append(res)
        for i in '01':
            self.backtrack(n,res+i, s, output)
    

## 320 Generalized Abbreviation
A word's generalized abbreviation can be constructed by taking any number of non-overlapping substrings and replacing them with their respective lengths. 
For example, "abcde" can be abbreviated into "a3e" ("bcd" turned into "3"), 
"1bcd1" ("a" and "e" both turned into "1"), and "23" ("ab" turned into "2" and "cde" turned into "3").
Given a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.


Input: word = "word"
Output: ["4","3d","2r1","2rd","1o2","1o1d","1or1","1ord","w3","w2d","w1r1","w1rd","wo2","wo1d","wor1","word"]


class Solution:
  def generateAbbreviations(self, word:str) -> List[str]:
      n = len(word)
      output = []
      res = ''
      i = 0
      self.dfs(n, output, res, i, word)
      return output
  
  def dfs(self, n, output, res, i, word):
    if i == n:
      output.append(res)
    else:
      self.dfs(n, output, res + word[i], i+1, word)
      if not res or res[-1] > '9':
        for j in range(i+1, n+1):
          self.dfs(n, output, res + str(j-i), j, word)




## 1593 Split a String Into the Max Number of Unique Substrings:
Given a string s, return the maximum number of unique substrings that the given string can be split into.
You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. 
However, you must split the substrings such that all of them are unique.
A substring is a contiguous sequence of characters within a string.

Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.


class Solution:
  def maxUniqueSplit(self,s: str) -> int:
    string_unique = set()
    return self.backtrack(s, string_unique)
    
    
    
  def backtrack(self, s, string_unique):
    n = len(s)
    res = 0
    if s:
      for i in range(1, n+1):
        if s[:i] not in string_unique:
          string_unique.add(s[:i])
          res = max(res, 1 + self.backtrack(s[i:], string_unique))
          string_unique.remove(s[:i])
    return res
 

## 39 Combination Sum
Given an array of distinct integers candidates and a target integer target, 
return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. 
Two combinations are unique if the frequency of at least one of the chosen numbers is different.
It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

class Solution:
  def combinationSum(self, candidates, target) -> List[List[int]]:
      output = []
      res = []
      self.backtrack(candidates, target, output, res, 0)
      return output
  
  def backtrack(self, candidates, target, output, res, start):
    if target == 0:
      return output.append(list(res))
    elif target < 0:
      return
    for i in range(len(candidates): 
      res.append(candidates[i])
      self.backtrack(candidates, target - candidates[i], output, res, i)
      res.pop()
  
  
  
  




