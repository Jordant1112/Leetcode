## 206 Revere Linked List I
Given the head of a singly linked list, reverse the list, and return the reversed list.
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Iterative:

class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
      if not head:
            return
      pre = None
      while head:
            cur = head.next
            head.next = pre
            pre = head
            head = cur
      return pre


Recursive:
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
      return self.reverse(head)
    
    def reverse(self, head, prev = None):
      if not head:
        return prev
      node = head.next
      head.next = prev
      prev = head
      return self.reverse(node, prev)
    
 class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
      if not head or not head.next:
        return head
      p = self.reverseList(head.next)
      head.next.next = head
      head.next = None
      return p

## 92. Reverse Linked List II
Given the head of a singly linked list and two integers left and right where left <= right, 
reverse the nodes of the list from position left to position right, and return the reversed list.

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]


Iterative
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        dummy = ListNode(0, head)
        left_prev = dummy
        cur = head
        for i in range(left-1):
            left_prev, cur = cur, cur.next
        prev = None
        for i in range(right-left+1):
            tmp.next = cur.next
            cur.next = prev
            prev, cur = cur, tmp.next
        
        left_prev.next.next = cur
        left_prev.next = prev
        return dummy.next

Recursive
class Solution:
    def __init__(self):
        self.__successor = None
        
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if left == 1:
            return self.reverseN(head, right)
        head.next = self.reverseBetween(head.next, left -1, right -1)
        return head
        
        
    def reverseN(self, head, n):
        if n == 1:
            self.__successor = head.next
            return head
        last = self.reverseN(head.next, n-1)
        head.next.next = head
        head.next = self.__successor
        return last
        
        
    








